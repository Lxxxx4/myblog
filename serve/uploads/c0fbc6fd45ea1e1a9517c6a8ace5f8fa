## js事件循环

### 任务队列
- js中的任务分为同步任务和异步任务
- 同步任务一般会直接进入到主线程形成一个执行栈
- 除了主线程外，还有一个事件触发线程——管理着一个任务队列（包括 宏任务队列 和 微任务队列）。
- 异步任务会通过任务队列的机制来进行协调，只要异步任务有了运行结果，就在任务队列之中放置一个事件。。
- 当主线程中的任务执行完毕后，会去任务队列读取对应的任务推入主线程并执行。这一过程称为事件循环
### 宏任务task
> 每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈>中执行）。
主要包含：script(整体代码)、setTimeout、setInterval、I/O、UI交互事件、postMessage、MessageChannel、setImmediate(Node.js 环境)

### 微任务microtask
> 在当前 task 执行结束后立即执行的任务。也就是说，在当前task任务后，下一个task之前，在渲染之前。
主要包含：Promise.then、MutaionObserver、process.nextTick(Node.js 环境)
### 运行机制
在事件循环中，每进行一次循环操作称为 tick，每一次 tick 的任务处理模型是比较复杂的，但关键步骤如下：
- 执行一个宏任务（栈中没有就从事件队列中获取）
- 执行过程中如果遇到微任务，就将它添加到微任务的任务队列中
- 宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）
- 所有微任务执行完毕，开始检查渲染，然后GUI线程接管渲染
- 渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）



参考文章

- [从一道题浅说 JavaScript 的事件循环](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/7)
- [async/await 执行顺序详解](https://segmentfault.com/a/1190000011296839)